// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudVoice.DAL;

namespace StudVoice.DAL.Migrations
{
    [DbContext(typeof(StudVoiceDBContext))]
    [Migration("20191006183517_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StudVoice.DAL.Contact", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ__Contacts__A9D10534674F8231");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("UQ__Contacts__5C7E359E834222FA");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("StudVoice.DAL.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__Faculties__737584F69CB86A6B");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("StudVoice.DAL.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TeacherId")
                        .HasColumnName("TeacherID");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("StudVoice.DAL.LessonFeedback", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Feedback")
                        .IsRequired();

                    b.Property<int?>("LessonId")
                        .HasColumnName("LessonID");

                    b.Property<int?>("Point");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LessonId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LessonFeedbacks");
                });

            modelBuilder.Entity("StudVoice.DAL.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__Roles__737584F6E20101C3");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("StudVoice.DAL.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("StudVoice.DAL.TeacherFeedback", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Feedback")
                        .IsRequired();

                    b.Property<int?>("Point");

                    b.Property<int?>("TeacherId")
                        .HasColumnName("TeacherID");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TeacherFeedbacks");
                });

            modelBuilder.Entity("StudVoice.DAL.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("ContactId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("FacultyId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedById");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("StudVoice.DAL.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("StudVoice.DAL.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudVoice.DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudVoice.DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudVoice.DAL.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudVoice.DAL.Contact", b =>
                {
                    b.HasOne("StudVoice.DAL.User", "Create")
                        .WithMany("ContactCreate")
                        .HasForeignKey("CreatedById");

                    b.HasOne("StudVoice.DAL.User", "Mod")
                        .WithMany("ContactMod")
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("StudVoice.DAL.Faculty", b =>
                {
                    b.HasOne("StudVoice.DAL.User", "Create")
                        .WithMany("FacultyCreate")
                        .HasForeignKey("CreatedById");

                    b.HasOne("StudVoice.DAL.User", "Mod")
                        .WithMany("FacultyMod")
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("StudVoice.DAL.Lesson", b =>
                {
                    b.HasOne("StudVoice.DAL.User", "Create")
                        .WithMany("LessonCreate")
                        .HasForeignKey("CreatedById");

                    b.HasOne("StudVoice.DAL.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK__Lessons__Teacher__36B12243");

                    b.HasOne("StudVoice.DAL.User", "Mod")
                        .WithMany("LessonMod")
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("StudVoice.DAL.LessonFeedback", b =>
                {
                    b.HasOne("StudVoice.DAL.User", "Create")
                        .WithMany("LessonFeedbackCreate")
                        .HasForeignKey("CreatedById");

                    b.HasOne("StudVoice.DAL.Lesson", "Lesson")
                        .WithMany("LessonFeedbacks")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK__LessonFee__Lesso__398D8EEE");

                    b.HasOne("StudVoice.DAL.User", "Mod")
                        .WithMany("LessonFeedbackMod")
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("StudVoice.DAL.Teacher", b =>
                {
                    b.HasOne("StudVoice.DAL.User", "Create")
                        .WithMany("TeacherCreate")
                        .HasForeignKey("CreatedById");

                    b.HasOne("StudVoice.DAL.User", "Mod")
                        .WithMany("TeacherMod")
                        .HasForeignKey("UpdatedById");

                    b.HasOne("StudVoice.DAL.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Teachers__UserId__33D4B598");
                });

            modelBuilder.Entity("StudVoice.DAL.TeacherFeedback", b =>
                {
                    b.HasOne("StudVoice.DAL.User", "Create")
                        .WithMany("TeacherFeedbackCreate")
                        .HasForeignKey("CreatedById");

                    b.HasOne("StudVoice.DAL.Teacher", "Teacher")
                        .WithMany("TeacherFeedbacks")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK__TeacherFe__Teach__3C69FB99");

                    b.HasOne("StudVoice.DAL.User", "Mod")
                        .WithMany("TeacherFeedbackMod")
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("StudVoice.DAL.User", b =>
                {
                    b.HasOne("StudVoice.DAL.Contact", "Contact")
                        .WithMany("Users")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK__Users__ContactId__2A4B4B5E");

                    b.HasOne("StudVoice.DAL.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK__Users__FacultyId__2B3F6F97");
                });

            modelBuilder.Entity("StudVoice.DAL.UserRole", b =>
                {
                    b.HasOne("StudVoice.DAL.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StudVoice.DAL.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
